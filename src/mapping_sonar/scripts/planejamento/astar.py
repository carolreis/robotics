 #! /usr/bin/env python3
import ast
import numpy as np
from math import exp, sqrt, isinf
import operator
import json

class AStar:

    def __init__(self, graph, start, goal):
        self.current_queue = []
        self.done_queue = []
        self.backtrack_queue = []
        self.graph = graph
        self.start = start
        self.goal = goal

    def _recur(self, current_node_key, total_cost, done_queue_copy):
        # print('\n\t\t\t\t >>>>>> Recorrência')
        # print('\t\t\t\t\t Custo total atual: ', total_cost)

        if len(done_queue_copy) > 0:
            parent = done_queue_copy.pop()
            # print('\t\t\t\t\tNó pai da lista de DONE: ', parent)

            parent_node_list = self.graph[parent[0]][parent[1]][0]
            # print('\t\t\t\t\tLista de adjacência de DONE: ', parent_node_list)

            for node in parent_node_list:
                # print('\t\t\t\t\t\t Busca pelo filho na lista')

                if node[0] == current_node_key[0] and node[1] == current_node_key[1]:
                    # print("\t\t\t\t\t\t Nó anterior com atual: ", node)
                    # print("\t\t\t\t\t\t Custo nó anterior com atual: ", node[2])
                    total_cost += node[2]
                    # print('\t\t\t\t\t\t Total cost recorrência: ', total_cost)
                    break

            return self._recur(parent, total_cost, done_queue_copy)
        
        return total_cost
        
    def _backward_cost(self, child, current_node_key):
        total_cost = child[2]

        # print('\n\t\t ************ Calcula custa do nó filho até o primeiro ')
        # print('\t\t\tPilha de prontos: ', self.done_queue)
        # print('\t\t\tFilho atual: ', child)
        # print('\t\t\tCusto filho atual até o pai que está sendo expandido: ', total_cost)
        # print('\t\t\tNó atual para cálculo do custo: ', current_node_key)


        done_queue_copy = self.done_queue.copy()

        try:
            total_cost = self._recur(current_node_key, total_cost, done_queue_copy)
        except:
            pass

        # print('\t\t\t Custo total finalizado: ', total_cost)
        # print('\t\t ..................................... \n\n')

        return total_cost

    def _expand(self):
        # print("\n ====== EXPANDIR ")

        is_finished = False
        max_iteraction = 1000
        iteraction = 0

        while not is_finished:
        # for i in range(0,15):

            iteraction += 1
            if iteraction == max_iteraction:
                break

            # print("\n\n\n**************************************************************************************************************************************************************")
            # print("************************ Não encontrou ainda. Busca... ************************")
            # print("**************************************************************************************************************************************************************")
            # print("\n\t Pilha atual: ", self.current_queue)
            # print("\n *** Expande o primeiro da pilha")

            current_key = (self.current_queue[0][0][0], self.current_queue[0][0][1])
            # print("\t ###### Nó atual: ", current_key)
            current_node = self.graph[current_key[0]][current_key[1]]

            current_node_adj = current_node[0]
            # print("\t Lista adjacência do nó atual: ", current_node_adj)

            # current_node_total_cost = current_node[1]
            # # print("\t 'Custo do nó' atual até objetivo: ", current_node_total_cost, " (?) Acho que isso está errado... ")

            self.backtrack_queue.append(
                (current_node_adj[0][0],
                current_node_adj[0][1])
            )
            # print("\t Lista de backtrack: ", self.backtrack_queue)

            for child in current_node_adj:
                # print('\n\t >>>>>>>> Expandindo filhos de: ', (current_key))
                if self.backtrack_queue[-1] != (child[0], child[1]) and (child[0], child[1]) not in self.done_queue:

                    # print('\t\tFilho de %s: %s' % (current_key,child))

                    # print("\t\t\tVerifica se o filho tem distância infinita")
                    if isinf(child[2]):
                        # print("\t\t\t\t ++++++ Distância infinita. Ignora... ++++++")
                        pass
                    else:
                        custo = self._backward_cost(child, current_key)

                        # print("Custo filho até raiz: ", custo)
                        # custo_total = custo + current_node_total_cost
                        custo_filho_goal = self.graph[child[0]][child[1]][1]
                        # print("Custo do filho até objetivo: ", custo_filho_goal)
                        custo_total = custo + custo_filho_goal
                        # # print("Adiciona filho na pilha: ", child)

                        #  TODO: Buscar se nó já existe lá, e se é menor do que está lá
                        queue_range = list(range(0,len(self.current_queue)))

                        add = True
                        for j in queue_range:
                            node = self.current_queue[j]

                            if (child[0],child[1]) == node[0]:

                                if custo_total >= node[3]:
                                    # print(".... Retira .....: ", node[0])
                                    self.current_queue.pop(j)
                                else:
                                    # TODO: Não deve adicionar
                                    # print("Não adiciona atual, mantem o que está na pilha")
                                    add = False

                                break

                        if add:
                            # print(".... Adiciona ......: ", child)
                            self.current_queue.append(
                                [
                                    (child[0],child[1]),
                                    self.backtrack_queue[-1],
                                    custo,
                                    custo_total
                                ]
                            )

                        # print("\t Pilha após expandir filho: ", self.current_queue)
                        # # print("Reordena")
                        # current_queue.sort(key=operator.itemgetter(3))
                else:
                    pass
                    # # print("É o mesmo que o pai, ignora - ou está na lista de done")

            # Adiciona o que terminou na lista de DONE
            self.done_queue.append(
                current_key
            )
            # print("\n\tAdiciona na lista de prontos: ", self.done_queue)

            # print('\tself.goal ', self.goal)
            # print('\tQUEUE TOP ', self.done_queue[-1])
            is_finished = self.done_queue[-1] == self.goal
            # print('\tIS FINISHED? ', is_finished)

            # print('\n')
            # print("\tBACKTRACK QUEUE: ", self.backtrack_queue)
            # print("\tCURRENT QUEUE: ", self.current_queue)
            # print("DONE QUEUE: ", self.done_queue)

            if is_finished:
                # print('\n ****** FINAL ')
                # print("CURRENT QUEUE: ", self.current_queue)
                # print("DONE QUEUE: ", self.done_queue)
                return self.done_queue

            # print("\n\tRemove pai da lista atual")
            # Remove da lista atual o que foi finalizado
            self.current_queue.pop(0)
            # print("\n\tCURRENT QUEUE: ", self.current_queue)
            # print("\tOrdewna pilha")
            self.current_queue.sort(key=operator.itemgetter(3))
            # print("\tCURRENT QUEUE: ", self.current_queue)
            # print("\tDONE QUEUE: ", self.done_queue)

        return self.done_queue

    def begin(self):
        # print("\n ====== Início ======")
        # print("Pilha atual: ", self.current_queue)

        current_node = self.graph[self.start[0]][self.start[1]]
        # print("Nó inicial: ", current_node)

        current_node_adj = current_node[0]
        current_node_total_cost = current_node[1]

        self.current_queue.append(
            [
                (self.start[0],self.start[1]),
                (current_node_adj[0][0], current_node_adj[0][1]),
                current_node[0][0][2],
                current_node_total_cost
            ]
        )

        # print("Pilha atual atualizada: ", self.current_queue)

        return self._expand()

class Graph:

    def __init__(self, map, goal):
        self.map = map
        self.goal = goal

        # print('MAPA: ', map)

    def build_graph(self):
        map = np.array(self.map)
        # map = np.where(map > 0, map/15, map)
        map = np.where(map >= 0.5, 1, map)
        map = np.where(map < 0.5, 0, map)
    
        # print('GOAL: ', self.goal)
        # print('MAP GOAL: ', self.map[23])
        # print('MAP GOAL: ', self.map[23][40])
        # print('MAP START: ', self.map[13])
        # print('MAP START: ', self.map[13][36])

        # print('MAP 14 37: ', self.map[14][37])
        # print('MAP 16 37: ', self.map[16][37])
        # print('MAP 16 38: ', self.map[16][38])
        # print('MAP 15 38: ', self.map[15][38])

        graph = [[0 for c in map] for row in map]

        for x in range(0,len(map)):
            for y in range(0,len(map[x])):

                l = []
                for d in PathPlanning.displacement:
                    indicex = x+d[0]
                    indicey = y+d[1]

                    if indicex >= 0 and indicey >= 0 and indicex < len(map) and indicey < len(map[0]):

                        # Se não for célula de obstáculo
                        if map[x][y] == 0:

                            if d[0] == 0 and d[1] == 0:
                                valor = 0
                            elif abs(d[0]) == abs(d[1]):
                                valor = sqrt(2)
                            else:
                                valor = 1

                            if map[indicex][indicey] > 0:
                                valor = float('inf')

                            l.append((indicex, indicey,valor))
            
                if len(l) > 0:
                    new_list = sorted(l, key=operator.itemgetter(2))
                    g_dist = sqrt((self.goal[0] - x)**2 + (self.goal[1] - y)**2)
                    graph[x][y] = [new_list, g_dist]
                else:
                    graph[x][y] = [[], float('inf')]

        return graph, map

class PathPlanning:

    displacement = [
        (-1,-1), (0,-1), (1,-1),
        (-1, 0), (0,0), (1,0),
        (-1, 1), (0,1), (1,1),
    ]

    def __init__(self, map, start, goal):
        self.map = map
        self.start = start
        self.goal = goal
        self.graph = []
        self.new_map = []

    def get_route(self):
        g = Graph(self.map, self.goal)
        graph, new_map = g.build_graph()
        self.graph = graph
        self.new_map = new_map

        print("GRAPH: ", graph)
        return ([],[])
        # a = AStar(graph, self.start, self.goal)
        # return (a.begin(), new_map)

# mapa = [
#     [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
#     [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
#     [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 15, 15, 0, 0, 0, 0, 0, 0, 3, 15, 15, 0, 0, 3, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 12, 3, 0, 0, 0, 0, 0, 0, 3, 6, 15, 15, 15, 15, 15, 12, 3, 15, 15, 15, 6, 15, 0, 0, 0, 0, 0],
#     [0, 0, 0, 0, 0, 0, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 12, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 6, 0, 0],
#     [0, 3, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 0, 0],
#     [0, 15, 15, 15, 15, 15, 13, 12, 15, 15, 15, 15, 15, 15, 15, 17, 16, 16, 17, 16, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 16, 17, 17, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 0, 0],
#     [0, 15, 15, 15, 15, 0, 0, 0, 6, 15, 15, 15, 15, 16, 16, 15, 17, 17, 15, 16, 15, 17, 15, 16, 15, 16, 17, 15, 15, 0, 0, 8, 5, 0, 2, 15, 15, 15, 17, 16, 15, 4, 16, 15, 15, 16, 15, 15, 0, 0, 0, 2, 0, 0, 8, 15, 15, 15, 15, 15, 12, 0, 0, 0, 0, 0, 0, 3, 3, 9, 6, 15, 10, 8, 11, 17, 15, 15, 15, 0, 0],
#     [0, 15, 15, 15, 15, 0, 0, 0, 0, 6, 3, 6, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 17, 15, 15, 15, 15, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 15, 15, 15, 0, 0],
#     [0, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 15, 15, 9, 0],
#     [0, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 15, 15, 15, 0],
#     [0, 15, 15, 15, 15, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 15, 15, 15, 15, 0],
#     [0, 15, 15, 15, 15, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 15, 15, 15, 0],
#     [0, 15, 15, 15, 15, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 15, 15, 15, 15, 0],
#     [0, 15, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 15, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 15, 15, 15, 15, 0],
#     [0, 15, 15, 15, 15, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 15, 15, 15, 15, 0],
#     [0, 15, 15, 15, 15, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 3, 2, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 15, 15, 15, 9, 0],
#     [0, 15, 15, 15, 15, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 15, 17, 15, 15, 15, 11, 10, 16, 15, 15, 15, 15, 17, 17, 15, 15, 17, 17, 14, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 15, 15, 15, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 15, 15, 15, 6, 0],
#     [0, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 16, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 17, 17, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 15, 15, 15, 15, 15, 3, 0, 0, 0, 0, 0, 0, 0, 9, 14, 3, 0, 0, 0, 0, 0, 15, 15, 15, 15, 0],
#     [0, 15, 15, 15, 15, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 15, 15, 16, 15, 16, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 16, 15, 0, 0, 0, 0, 0, 0, 13, 17, 16, 15, 15, 2, 0, 0, 0, 0, 15, 16, 15, 15, 15, 3, 0, 0, 0, 1, 14, 17, 15, 15, 15, 15, 0, 0, 0, 0, 0, 15, 15, 15, 15, 0],
#     [0, 15, 15, 15, 15, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 15, 15, 15, 15, 16, 17, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 17, 15, 16, 16, 0, 0, 0, 0, 0, 17, 16, 15, 15, 15, 15, 17, 17, 0, 0, 0, 16, 16, 15, 15, 15, 3, 0, 0, 0, 7, 16, 16, 17, 15, 17, 16, 15, 0, 0, 0, 0, 15, 15, 15, 15, 0],
#     [0, 15, 15, 15, 15, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 17, 15, 16, 16, 17, 16, 17, 16, 15, 15, 15, 16, 15, 16, 15, 16, 16, 15, 0, 0, 0, 0, 0, 0, 16, 15, 15, 15, 15, 15, 15, 17, 0, 0, 0, 8, 16, 15, 15, 15, 0, 0, 0, 0, 9, 15, 15, 15, 15, 15, 15, 15, 9, 0, 0, 0, 15, 15, 15, 15, 0],
#     [0, 15, 15, 15, 15, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 15, 15, 15, 15, 15, 15, 15, 6, 0, 0, 15, 15, 15, 15, 15, 0, 0, 0, 0, 0, 15, 15, 15, 15, 15, 15, 15, 16, 0, 0, 0, 15, 15, 15, 15, 0],
#     [0, 15, 15, 15, 15, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 15, 15, 15, 15, 15, 15, 15, 17, 0, 0, 0, 2, 17, 15, 15, 15, 0, 0, 0, 2, 10, 15, 15, 15, 15, 15, 15, 15, 15, 0, 0, 9, 15, 15, 15, 6, 0],
#     [0, 15, 15, 15, 15, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 15, 15, 15, 15, 15, 15, 15, 15, 0, 0, 0, 5, 16, 15, 15, 15, 3, 0, 0, 2, 15, 15, 15, 15, 15, 15, 15, 15, 17, 0, 0, 10, 15, 15, 15, 9, 0],
#     [0, 15, 15, 15, 15, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 16, 15, 15, 15, 15, 15, 15, 17, 0, 0, 0, 11, 17, 15, 15, 15, 0, 0, 0, 0, 9, 15, 15, 15, 15, 15, 15, 15, 15, 0, 0, 9, 15, 15, 15, 12, 0],
#     [0, 15, 15, 15, 15, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 17, 15, 17, 15, 17, 0, 0, 0, 0, 16, 16, 15, 15, 15, 0, 0, 0, 0, 0, 15, 15, 15, 15, 17, 16, 15, 0, 0, 0, 0, 15, 15, 15, 15, 0],
#     [0, 15, 15, 15, 15, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 15, 3, 0, 0, 0, 0, 0, 17, 16, 15, 15, 15, 0, 0, 0, 0, 0, 0, 15, 15, 15, 17, 17, 12, 0, 0, 0, 0, 15, 15, 15, 15, 0],
#     [0, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 11, 5, 9, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 15, 15, 15, 15, 0],
#     [0, 15, 15, 15, 15, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 15, 16, 15, 15, 15, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 15, 15, 15, 0],
#     [0, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 16, 15, 15, 15, 15, 15, 16, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 15, 15, 15, 0],
#     [0, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 15, 15, 15, 15, 15, 15, 15, 15, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 15, 15, 15, 15, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 15, 15, 12, 0],
#     [0, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 17, 15, 15, 15, 15, 15, 15, 15, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 15, 15, 15, 15, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 15, 15, 15, 0, 0],
#     [0, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 15, 15, 15, 15, 15, 15, 15, 17, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 15, 15, 15, 0],
#     [0, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 15, 15, 15, 15, 15, 15, 16, 17, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 15, 15, 15, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 15, 15, 15, 0],
#     [0, 15, 15, 15, 15, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 13, 15, 15, 15, 15, 15, 15, 17, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 15, 15, 15, 0],
#     [0, 15, 15, 15, 15, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 15, 17, 17, 15, 15, 16, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 15, 15, 15, 0],
#     [0, 15, 15, 15, 15, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 3, 3, 6, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 15, 15, 15, 0],
#     [0, 15, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 15, 15, 15, 0],
#     [0, 15, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 15, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 15, 15, 15, 15, 3, 0, 0, 0, 0, 0, 0, 5, 11, 6, 0, 0, 0, 0, 0, 9, 17, 15, 15, 3, 0],
#     [0, 15, 15, 15, 15, 6, 0, 0, 0, 0, 0, 0, 0, 11, 16, 15, 13, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 15, 15, 15, 16, 0, 0, 0, 0, 0, 0, 16, 17, 15, 15, 12, 0, 0, 0, 0, 7, 16, 15, 15, 9, 0],
#     [0, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 9, 15, 15, 15, 14, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 15, 15, 15, 17, 0, 0, 0, 0, 0, 16, 15, 15, 15, 15, 15, 17, 0, 0, 0, 0, 15, 15, 15, 15, 0],
#     [0, 15, 15, 15, 15, 3, 0, 0, 0, 0, 0, 0, 12, 17, 15, 17, 15, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 15, 15, 15, 17, 0, 0, 0, 0, 1, 15, 15, 15, 15, 15, 15, 15, 1, 0, 0, 0, 17, 15, 15, 15, 0],
#     [0, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 3, 17, 15, 17, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 15, 15, 17, 3, 0, 0, 0, 10, 15, 15, 15, 15, 15, 15, 15, 17, 0, 0, 0, 15, 15, 15, 15, 0],
#     [0, 15, 15, 15, 15, 3, 0, 0, 0, 0, 0, 0, 0, 15, 17, 15, 15, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 9, 15, 15, 15, 17, 3, 0, 0, 0, 3, 15, 15, 15, 15, 15, 15, 15, 17, 0, 0, 0, 16, 15, 15, 15, 0],
#     [0, 15, 15, 15, 15, 3, 0, 0, 0, 0, 0, 0, 0, 17, 15, 15, 15, 15, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 15, 15, 15, 15, 15, 3, 0, 0, 0, 0, 14, 15, 15, 15, 15, 15, 15, 17, 0, 0, 0, 17, 15, 15, 15, 0],
#     [0, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 16, 15, 15, 15, 17, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 15, 15, 15, 15, 0, 0, 0, 0, 0, 1, 15, 15, 15, 15, 15, 17, 0, 0, 0, 0, 17, 15, 15, 9, 0],
#     [0, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 17, 15, 15, 15, 16, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 17, 15, 15, 15, 1, 0, 0, 0, 0, 0, 0, 15, 15, 15, 15, 14, 0, 0, 0, 3, 16, 15, 15, 6, 0],
#     [0, 15, 15, 15, 17, 3, 0, 0, 0, 0, 0, 0, 0, 17, 15, 15, 15, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 12, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 9, 16, 9, 0, 0, 0, 0, 6, 17, 15, 15, 15, 0],
#     [0, 15, 15, 15, 15, 6, 0, 0, 0, 0, 0, 0, 0, 17, 15, 15, 15, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 17, 15, 15, 15, 0],
#     [0, 15, 15, 15, 16, 3, 0, 0, 0, 0, 0, 0, 0, 15, 15, 15, 15, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 15, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 15, 15, 15, 15, 0],
#     [0, 15, 15, 15, 16, 0, 0, 0, 0, 0, 0, 0, 0, 15, 15, 15, 15, 15, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 16, 15, 15, 15, 0],
#     [0, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 15, 15, 15, 15, 15, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 17, 15, 15, 15, 0],
#     [0, 15, 15, 15, 17, 3, 0, 0, 0, 0, 0, 0, 0, 15, 15, 15, 15, 15, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 15, 15, 15, 0],
#     [0, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 15, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 15, 15, 15, 0],
#     [0, 15, 15, 15, 17, 0, 0, 0, 0, 0, 0, 0, 0, 15, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 15, 15, 3, 0],
#     [0, 15, 15, 15, 16, 0, 0, 0, 0, 0, 0, 0, 3, 15, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 15, 16, 12, 10, 17, 15, 17, 16, 15, 16, 15, 15, 14, 12, 12, 16, 16, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 15, 15, 15, 0],
#     [0, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 3, 15, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 16, 17, 17, 17, 17, 17, 17, 15, 15, 15, 15, 15, 15, 17, 17, 17, 15, 16, 15, 17, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 17, 15, 15, 15, 0],
#     [0, 15, 15, 15, 16, 0, 0, 0, 0, 0, 0, 0, 6, 15, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 17, 17, 15, 15, 16, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 17, 15, 15, 15, 0],
#     [0, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 15, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 17, 15, 15, 16, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 6, 0, 0, 0, 0, 0, 0, 0, 0, 3, 17, 15, 15, 15, 0],
#     [0, 15, 15, 15, 17, 0, 0, 0, 0, 0, 0, 0, 0, 15, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 15, 15, 16, 17, 17, 15, 15, 16, 17, 15, 15, 15, 15, 15, 17, 16, 15, 17, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 11, 15, 15, 15, 6, 0, 0, 0, 0, 0, 0, 0, 8, 17, 15, 15, 15, 0],
#     [0, 15, 15, 15, 17, 0, 0, 0, 0, 0, 0, 0, 0, 15, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 3, 12, 6, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 16, 17, 15, 15, 16, 15, 15, 6, 0, 0, 0, 0, 0, 0, 9, 15, 15, 15, 12, 0],
#     [0, 15, 15, 15, 17, 0, 0, 0, 0, 0, 0, 0, 0, 15, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 15, 15, 15, 15, 15, 15, 15, 15, 3, 0, 0, 0, 0, 0, 10, 15, 15, 15, 0, 0],
#     [0, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 3, 15, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 15, 15, 15, 15, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 16, 15, 15, 15, 0, 0],
#     [0, 15, 15, 15, 17, 0, 0, 0, 0, 0, 0, 0, 3, 15, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 15, 15, 15, 15, 15, 15, 15, 17, 0, 0, 0, 0, 0, 0, 16, 15, 15, 15, 0, 0],
#     [0, 15, 15, 15, 16, 0, 0, 0, 0, 0, 0, 0, 0, 15, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 15, 15, 15, 15, 15, 15, 17, 16, 0, 0, 0, 0, 0, 0, 15, 15, 15, 15, 0, 0],
#     [0, 15, 15, 15, 17, 0, 0, 0, 0, 0, 0, 0, 0, 15, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 16, 15, 15, 15, 15, 15, 16, 16, 0, 0, 0, 0, 0, 0, 16, 15, 15, 15, 0, 0],
#     [0, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 3, 15, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 15, 15, 15, 15, 15, 17, 11, 0, 0, 0, 0, 0, 0, 16, 15, 15, 15, 0, 0],
#     [0, 15, 15, 15, 17, 0, 0, 0, 0, 0, 0, 0, 3, 15, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 15, 16, 16, 17, 15, 15, 17, 0, 0, 0, 0, 0, 0, 0, 15, 15, 15, 15, 6, 0],
#     [0, 15, 15, 15, 17, 0, 0, 0, 0, 0, 0, 0, 0, 15, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 15, 15, 15, 12, 0],
#     [0, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 15, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 15, 15, 15, 3, 0],
#     [0, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 15, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 15, 15, 15, 3, 0],
#     [0, 15, 15, 15, 17, 0, 0, 0, 0, 0, 0, 0, 3, 15, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 15, 15, 15, 3, 0],
#     [0, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 15, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 15, 15, 15, 0, 0],
#     [0, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 3, 15, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 15, 15, 15, 0, 0],
#     [0, 12, 15, 15, 16, 3, 0, 0, 0, 0, 0, 0, 15, 15, 15, 15, 15, 15, 16, 6, 6, 9, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 16, 1, 0, 0, 0, 0, 0, 0, 3, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 15, 15, 15, 15, 0, 0],
#     [0, 6, 15, 15, 15, 15, 15, 15, 15, 15, 13, 11, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 0, 0],
#     [0, 0, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 0, 0],
#     [0, 0, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 9, 0, 0, 0],
#     [0, 0, 12, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 12, 0, 0, 0, 0, 0, 0, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 12, 12, 12, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 12, 12, 15, 15, 15, 9, 3, 0, 0, 0, 0, 0],
#     [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
#     [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
# ]


# mapa_f = open('MAPA.json')
# mapa = json.load(mapa_f)

# mapa = [
#             [0, 0, 0, 5, 10],
#             [0, 0, 3, 2, 15],
#             [0, 0, 0, 8, 7],
#             [0, 0, 0, 0, 0],
#             [0, 0, 0, 0, 0]
#         ]
mapa = [
            [0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0],
            [0, 0, 15, 0, 0],
            [0, 0, 15, 0, 0],
            [0, 0, 15, 0, 0]
        ]

if __name__ == "__main__":
    start = (3,1)
    goal = (3,3)
    # start = (8,15)
    # goal = (18,24)
    # start = (0,2)
    # goal = (3,3)
    p = PathPlanning(mapa, start, goal)
    route, map = p.get_route()

    print('ROUTE: ', route)